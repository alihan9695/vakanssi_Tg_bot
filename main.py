import asyncio
import logging
import sqlite3
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)

TOKEN = "7261752570:AAFRvailBhXYgl8scYnc7XXbkXKL_TjAcTs"
HH_API_URL = "https://api.hh.kz/vacancies"
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("jobs.db")
cursor = conn.cursor()
cursor.execute(
    '''CREATE TABLE IF NOT EXISTS jobs (id INTEGER PRIMARY KEY, title TEXT, city TEXT, salary TEXT, description TEXT)''')
conn.commit()


# –û–±—ã—á–Ω–æ–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –º–µ–Ω—é
def reply_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É")],
            [KeyboardButton(text="üìÑ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")]
        ],
        resize_keyboard=True
    )


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_main_menu())


@dp.message()
async def handle_message(message: types.Message):
    text = message.text.lower()

    if message.text == "üîç –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'):")
        return

    elif message.text == "üìÑ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–î–æ–ª–∂–Ω–æ—Å—Ç—å - –ì–æ—Ä–æ–¥ - –ó–∞—Ä–ø–ª–∞—Ç–∞ - –û–ø–∏—Å–∞–Ω–∏–µ`")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
    if " - " in text:
        try:
            title, city, salary, description = text.split(" - ")
            cursor.execute("INSERT INTO jobs (title, city, salary, description) VALUES (?, ?, ?, ?)",
                           (title, city, salary, description))
            conn.commit()
            await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        except:
            await message.answer("‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –î–æ–ª–∂–Ω–æ—Å—Ç—å - –ì–æ—Ä–æ–¥ - –ó–∞—Ä–ø–ª–∞—Ç–∞ - –û–ø–∏—Å–∞–Ω–∏–µ")
    else:
        cursor.execute("SELECT title, city, salary, description FROM jobs WHERE LOWER(title) LIKE ?", (f"%{text}%",))
        results = cursor.fetchall()
        response = ""
        for job in results:
            response += f"üìå {job[0]} - {job[1]}\nüí∞ {job[2]}\nüìù {job[3]}\n\n"

        params = {"text": text, "area": 159}
        try:
            hh_response = requests.get(HH_API_URL, params=params).json()
            for job in hh_response.get("items", [])[:5]:
                response += (
                    f"üìå {job['name']}\n"
                    f"üè¢ {job['employer']['name']}\n"
                    f"üåç {job['area']['name']}\n"
                    f"üí∞ {job.get('salary', {}).get('from', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({job['alternate_url']})\n\n"
                )
        except:
            response += "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.kz."

        await message.answer(response or "‚ùå –í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ])
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

